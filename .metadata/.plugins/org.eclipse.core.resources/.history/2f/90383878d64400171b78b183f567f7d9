package pack;

import java.util.Random;
 import java.util.*;
 import java.util.Scanner;
 import java.util.Random;
 import java.util.*;
 import java.util.Scanner;

import java.awt.*;
import java.awt.event.*;

import javax.swing.event.*;
import javax.imageio.*;
import javax.swing.*;
import javax.swing.border.Border;

class Pockerframe extends JFrame {
 private JLabel pl1 = new JLabel("Player '1' : ");
 private JLabel pl2 = new JLabel("Player '2' : ");

 public Pockerframe() {
  Image img = new ImageIcon().getImage();
  setSize(1500, 1000);
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setTitle("Poker Game");
  Border bln, ber, bel, bbr, bbl; // 테두리
  bln = BorderFactory.createLineBorder(Color.BLACK); // 테두리 색

  Container cp = getContentPane();
  cp.setBackground(Color.lightGray);
  cp.setLayout(new BorderLayout());

  /* spade A~K 각 카드번호에 image 지정 */
  final ImageIcon card0 = new ImageIcon("c:\\image\\52.jpg");
  final ImageIcon card1 = new ImageIcon("c:\\image\\40.jpg");
  final ImageIcon card2 = new ImageIcon("c:\\image\\41.jpg");
  final ImageIcon card3 = new ImageIcon("c:\\image\\42.jpg");
  final ImageIcon card4 = new ImageIcon("c:\\image\\43.jpg");
  final ImageIcon card5 = new ImageIcon("c:\\image\\44.jpg");
  final ImageIcon card6 = new ImageIcon("c:\\image\\45.jpg");
  final ImageIcon card7 = new ImageIcon("c:\\image\\46.jpg");
  final ImageIcon card8 = new ImageIcon("c:\\image\\47.jpg");
  final ImageIcon card9 = new ImageIcon("c:\\image\\48.jpg");
  final ImageIcon card10 = new ImageIcon("c:\\image\\49.jpg");
  final ImageIcon card11 = new ImageIcon("c:\\image\\50.jpg");
  final ImageIcon card12 = new ImageIcon("c:\\image\\51.jpg");

  /* diamond A~K */
  final ImageIcon card13 = new ImageIcon("c:\\image\\26.jpg");
  final ImageIcon card14 = new ImageIcon("c:\\image\\14.jpg");
  final ImageIcon card15 = new ImageIcon("c:\\image\\15.jpg");
  final ImageIcon card16 = new ImageIcon("c:\\image\\16.jpg");
  final ImageIcon card17 = new ImageIcon("c:\\image\\17.jpg");
  final ImageIcon card18 = new ImageIcon("c:\\image\\18.jpg");
  final ImageIcon card19 = new ImageIcon("c:\\image\\19.jpg");
  final ImageIcon card20 = new ImageIcon("c:\\image\\20.jpg");
  final ImageIcon card21 = new ImageIcon("c:\\image\\21.jpg");
  final ImageIcon card22 = new ImageIcon("c:\\image\\22.jpg");
  final ImageIcon card23 = new ImageIcon("c:\\image\\23.jpg");
  final ImageIcon card24 = new ImageIcon("c:\\image\\24.jpg");
  final ImageIcon card25 = new ImageIcon("c:\\image\\25.jpg");

  /* heart A~K */
  final ImageIcon card26 = new ImageIcon("c:\\image\\39.jpg");
  final ImageIcon card27 = new ImageIcon("c:\\image\\27.jpg");
  final ImageIcon card28 = new ImageIcon("c:\\image\\28.jpg");
  final ImageIcon card29 = new ImageIcon("c:\\image\\29.jpg");
  final ImageIcon card30 = new ImageIcon("c:\\image\\30.jpg");
  final ImageIcon card31 = new ImageIcon("c:\\image\\31.jpg");
  final ImageIcon card32 = new ImageIcon("c:\\image\\32.jpg");
  final ImageIcon card33 = new ImageIcon("c:\\image\\33.jpg");
  final ImageIcon card34 = new ImageIcon("c:\\image\\34.jpg");
  final ImageIcon card35 = new ImageIcon("c:\\image\\35.jpg");
  final ImageIcon card36 = new ImageIcon("c:\\image\\36.jpg");
  final ImageIcon card37 = new ImageIcon("c:\\image\\37.jpg");
  final ImageIcon card38 = new ImageIcon("c:\\image\\38.jpg");

  /* club A~K */
  final ImageIcon card39 = new ImageIcon("c:\\image\\13.jpg");
  final ImageIcon card40 = new ImageIcon("c:\\image\\1.jpg");
  final ImageIcon card41 = new ImageIcon("c:\\image\\2.jpg");
  final ImageIcon card42 = new ImageIcon("c:\\image\\3.jpg");
  final ImageIcon card43 = new ImageIcon("c:\\image\\4.jpg");
  final ImageIcon card44 = new ImageIcon("c:\\image\\5.jpg");
  final ImageIcon card45 = new ImageIcon("c:\\image\\6.jpg");
  final ImageIcon card46 = new ImageIcon("c:\\image\\7.jpg");
  final ImageIcon card47 = new ImageIcon("c:\\image\\8.jpg");
  final ImageIcon card48 = new ImageIcon("c:\\image\\9.jpg");
  final ImageIcon card49 = new ImageIcon("c:\\image\\10.jpg");
  final ImageIcon card50 = new ImageIcon("c:\\image\\11.jpg");
  final ImageIcon card51 = new ImageIcon("c:\\image\\12.jpg");

  
  JPanel cd1 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card0.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd1.setBounds(50, 100, 180, 170); //
  add(cd1);

  JPanel cd2 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card1.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd2.setBounds(200, 100, 180, 170);
  add(cd2);
  
  JPanel cd3 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card48.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd3.setBounds(350, 100, 180, 170); //
  add(cd3);
  
  JPanel cd4 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card21.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd4.setBounds(500, 100, 180, 170); //
  add(cd4);
  
  JPanel cd5 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card17.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd5.setBounds(650, 100, 180, 170); //
  add(cd5);
  
  JPanel cd6 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card8.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd6.setBounds(800, 100, 180, 170); //
  add(cd6);
  
  JPanel cd7 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card22.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd7.setBounds(950, 100, 180, 170); //
  add(cd7);
  
  JPanel cd8 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card5.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd8.setBounds(50, 500, 180, 170); //
  add(cd8);
  
  JPanel cd9 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card18.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd9.setBounds(200, 500, 180, 170); //
  add(cd9);
  
  JPanel cd10 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card20.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd10.setBounds(350, 500, 180, 170); //
  add(cd10);
  
  JPanel cd11 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card33.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd11.setBounds(500, 500, 180, 170); //
  add(cd11);
  
  JPanel cd12 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card44.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd12.setBounds(650, 500, 180, 170); //
  add(cd12);
  
  JPanel cd13 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card50.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd13.setBounds(800, 500, 180, 170); //
  add(cd13);
  
  JPanel cd14 = new JPanel() { // cd1 패널객체 생성
   public void paint(Graphics g) { // g라는 그래픽변수를 받는 paint 메소드
    g.drawImage(card37.getImage(), 0, 0, null); // 이미지를 받아 card 출력
    setOpaque(false);
    super.paint(g);
   }
  };
  cd14.setBounds(950, 500, 180, 170); //
  add(cd14);
  
  cp.add(new JButton("카드 받아오기"), BorderLayout.NORTH);
  cp.add(new JButton("결과 보기"), BorderLayout.SOUTH);
  
  setVisible(true);

 }
}


class poker {

 int set[] = new int[14]; // 랜덤카드 14장을 받기위한 배열
 String shape[][] = new String[2][14];  // 카드모양을 지정하기 위한 배열
 int num[][] = new int[2][14];  // 카드번호를 지정하기 위한 배열
 int count[] = new int[2];   // 원페어,투페어 판단 배열
 int flush[] = new int[2];   // 플러쉬 판단 배열
 int straight[] = new int[2];  // 스트레이트 판단 배열
 int shapenum[][] = new int[2][4];  // 플러쉬 판단 배열
 int countnum[][] = new int[2][14];  // 페어수를 판단하기 위한 배열
 int winner[] = new int[2];   // 승자,패자를 나누는 배열
 int temp = 0, n = 0, win = 0, player = 0;
  String temp_s;  // 정렬을 위해 임시로 카드번호를 저장 할 temp, 카드모양을 저장할 temp_s
  String number = "NA23456789TJQK";  // 카드번호를 불러오기 위한 문자열

 Random ran = new Random();   // 닌수 생성

 int[] makeset() {   // 서로 다른 임의의 수(0~51 를 set 배열에 할당
  for (int i = 0; i < 14; i++) {
    set[i] = Math.abs(ran.nextInt() % 52);
   }
   for (int i = 0; i < 14; i++)
    for (int i1 = 0; i1 < 14; i1++)
     if (set[i] == set[i1] && i != i1)
      set[i] = Math.abs(ran.nextInt() % 52);
   return set;
  }

 int[][] allocset(int set[]) {  // 카드패를 7장 씩 나누는 메소드
  for (int i = 0; i < 7; i++)
    num[0][i] = set[i];
   for (int i = 0; i < 7; i++)
    num[1][i] = set[i + 7];
   return num;
  }

 int[][] makeshape(int num[][]) {  // 나눈 카드패의 모양을 결정하는 메소드
  for (int i = 0; i < 2; i++)
    for (int i1 = 0; i1 < 7; i1++) {
     if (num[i][i1] >= 0 && num[i][i1] <= 12) {
      shapenum[i][0]++;
      shape[i][i1] = "spade";
     } else if (num[i][i1] >= 13 && num[i][i1] <= 25) {
      shapenum[i][1]++;
      shape[i][i1] = "diamond";
     } else if (num[i][i1] >= 26 && num[i][i1] <= 38) {
      shapenum[i][2]++;
      shape[i][i1] = "heart";
     } else if (num[i][i1] >= 39 && num[i][i1] <= 51) {
      shapenum[i][3]++;
      shape[i][i1] = "club";
     }
    }
   return shapenum;  // 같은 모양의 패 개수를 반환한다.
  }

 String[][] returnshape() {  // 카드패의 모양을 반환하는 함수
  return shape;  
  }

 int[][] makenum(int num[][]) {  // 나눈 카드패의 카드번호를 결정하는 메소드
  for (int i = 0; i < 2; i++)
    for (int i1 = 0; i1 < 7; i1++)
     if (num[1][i1] >= 0 && num[i][i1] <= 12)
      num[i][i1] = num[i][i1] + 1;
     else if (num[i][i1] >= 13 && num[i][i1] <= 25)
      num[i][i1] = num[i][i1] - 12;
     else if (num[i][i1] >= 26 && num[i][i1] <= 38)
      num[i][i1] = num[i][i1] - 25;
     else if (num[i][i1] >= 39 && num[i][i1] <= 51)
      num[i][i1] = num[i][i1] - 38;
   return num;
  }

 int[][] arrayset(int num[][]) {   //카드 패를 오름차순으로 정렬하는 메소드
  for (int i = 0; i < 2; i++)
    for (int i1 = 0; i1 < 6; i1++)
     for (int i2 = i1; i2 < 6; i2++)
      if (num[i][i1] > num[i][i2 + 1]) {
       temp = num[i][i1];
       num[i][i1] = num[i][i2 + 1];
       num[i][i2 + 1] = temp;
       temp_s = shape[i][i1];
       shape[i][i1] = shape[i][i2 + 1];
       shape[i][i2 + 1] = temp_s;
      }
   returnshape();
   return num;
  }

 int[] countset(int num[][]) {   // 받은 카드번호에서 페어 수를 측정하는 메소드
  for (int i = 0; i < 2; i++) {
    n = 0;
    for (int i1 = 0; i1 < 6; i1++)
     for (int i2 = i1; i2 < 6; i2++)
      if (num[i][i1] == num[i][i2 + 1]) {
       countnum[i][n++] = num[i][i1];
       count[i]++;
      }
   }
   return count;   // 원페어인지 투페어인지 반환
 }

 int[] flushcheck(int shapenum[][]) {  // 받은 카드모양에서 플러쉬인지 측정하는 메소드
  for (int i = 0; i < 2; i++)
    for (int i1 = 0; i1 < 3; i1++)
     if (shapenum[i][i1] >= 5) {
      flush[i]++;
     }
   return flush;   //
  }

 int[] straightcheck(int num[][]) {
   for (int i = 0; i < 2; i++) {
    for (int i1 = 0; i1 < 3; i1++)
     if (num[i][i1 + 0] + 1 == num[i][i1 + 1] && num[i][i1 + 1] + 1 == num[i][i1 + 2]
       && num[i][i1 + 2] + 1 == num[i][i1 + 3] && num[i][i1 + 3] + 1 == num[i][i1 + 4]) {
      countnum[i][n++] = num[i][i1];
      straight[i]++;
     }
   }
   return straight;
  }

 int[] result(int[] count, int[] straight, int[] flush) {
   for (int i = 0; i < 2; i++) {
    for (int i1 = 0; i1 < 3; i1++)
     if (num[i][i1 + 0] == 1 && num[i][i1 + 1] == 10 && num[i][i1 + 2] == 11 && num[i][i1 + 3] == 12
       && num[i][i1 + 4] == 13 && shapenum[i][0] >= 5 && flush[i] >= 1) {
      count[i] = 9;
      System.out.println("player '" + (i + 1) + "' 족보 : " + "Royal Straight Flush!!");
     }
    if (flush[i] >= 1 && straight[i] >= 1) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + "Straight Flush!!");
     count[i] = 8;
    } else if (flush[i] >= 1) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + "Flush!!");
     count[i] = 7;
    } else if (straight[i] >= 1) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + number.charAt(countnum[i][0]) + " Straight!!");
     count[i] = 6;
    } else if (count[i] == 5) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + number.charAt(countnum[i][0]) + " FourCard!!");
    } else if (count[i] == 4) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + number.charAt(countnum[i][0]) + ", "
       + number.charAt(countnum[i][1]) + " Full House!!");
    } else if (count[i] == 3) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + number.charAt(countnum[i][0]) + " Triple!!");
    } else if (count[i] == 2) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + number.charAt(countnum[i][0]) + ", "
       + number.charAt(countnum[i][1]) + " Two Pair!!");
    } else if (count[i] == 1) {
     System.out.println("player '" + (i + 1) + "' 족보 : " + number.charAt(countnum[i][0]) + " One Pair!!");
    } else {
     System.out.println("player '" + (i + 1) + "' 족보 : " + "No Pair!!");
    }
   }
   return count;
  }

 void winner(int[] count) {
   if (count[0] > count[1])
    player = 0;
   else if (count[0] < count[1]) {
    player = 1;
   } else if (count[0] == count[1]) {
    player = countnum[0][0] > countnum[1][0] ? 0 : 1;
   }

  System.out.println();

  if (count[0] == 0 && count[1] == 0)
    System.out.println("무승부");
   else
    System.out.println("winner is  '" + (player + 1) + "'  player");
  }
 }

public class Exedf {
  public static void main(String args[]) {

  int set[] = new int[14];
   String shape[][] = new String[2][14];
   int num[][] = new int[2][14];
   int count[] = new int[2];
   int flush[] = new int[2];
   int straight[] = new int[2];
   int shapenum[][] = new int[2][4];

  String number = "NA23456789TJQK";
   Pockerframe pf = new Pockerframe();
   poker card = new poker();
   
   
   set = card.makeset(); // 서로 다른 임의의 수를 1차원 배열에 할당
  num = card.allocset(set); // 카드패 부여

  for (int i = 0; i < 2; i++) {
    for (int i1 = 0; i1 < 7; i1++)
    System.out.print(num[i][i1] + "  ");
    System.out.println();
   }

  shapenum = card.makeshape(num); // 카드패 모양 부여, shapenum=같은 모양수 측정
  shape = card.returnshape(); // 카드패 모양 리턴
  num = card.makenum(num); // 카드패 숫자 부여
  card.arrayset(num); // 카드패 순차정렬

  for (int i = 0; i < 2; i++) {
    System.out.println();
    System.out.println("player '" + (i + 1) + "' cardset : ");
    for (int i1 = 0; i1 < 7; i1++)
     System.out.print(shape[i][i1] + ". " + number.charAt(num[i][i1]) + "  ");
    System.out.println();
   }

  System.out.println();

  count = card.countset(num); // 페어수 측정
  flush = card.flushcheck(shapenum); // 플러쉬 여부 판정
  straight = card.straightcheck(num); // 스트레이트 여부 판정
  card.result(count, straight, flush); // 카운트, 스트레이트, 플러쉬 여부로 족보매치
  card.winner(count); // 카운트를 비교하여 승자판정
 }
 }